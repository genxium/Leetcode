@startuml

state "IDLE" as IDLE 
EXPECTING_TAG_EMPTY_MIXED: Expecting "TAG_NAME", "TAG_END_SLASH" or "CDATA_EXCLAMATION"

IDLE -down-> EXPECTING_TAG_NAME_EMPTY: '<'
EXPECTING_TAG_NAME_EMPTY -right-> EXPECTING_TAG_NAME_MORE: any except {'<','>'}
EXPECTING_TAG_NAME_MORE --> EXPECTING_TAG_NAME_MORE: any except {'<','>'}
EXPECTING_TAG_NAME_MORE -down-> EXPECTING_TAG_CONTENT: '>'

EXPECTING_TAG_CONTENT --> EXPECTING_TAG_CONTENT: any except {'<'}  
EXPECTING_TAG_CONTENT --> EXPECTING_TAG_EMPTY_MIXED: '<'  
EXPECTING_TAG_EMPTY_MIXED -right-> EXPECTING_TAG_NAME_MORE: any except\n{'<', '>', '/', '!'}  
EXPECTING_TAG_EMPTY_MIXED --> EXPECTING_CDATA_START: '!'  
EXPECTING_CDATA_START --> INVALID: any except\nsequentially "[CDATA[" 
EXPECTING_CDATA_START --> EXPECTING_CDATA_CONTENT: sequentially "[CDATA[" 
EXPECTING_CDATA_CONTENT --> EXPECTING_CDATA_CONTENT: any except ']' 
EXPECTING_CDATA_CONTENT --> EXPECTING_CDATA_ENDING_1: ']' 
EXPECTING_CDATA_ENDING_1 --> EXPECTING_CDATA_CONTENT: any except ']'  
EXPECTING_CDATA_ENDING_1 --> EXPECTING_CDATA_ENDING_2: ']' 
EXPECTING_CDATA_ENDING_2 --> EXPECTING_CDATA_CONTENT: any except '>' 
EXPECTING_CDATA_ENDING_2 --> EXPECTING_TAG_CONTENT: '>' 

EXPECTING_TAG_EMPTY_MIXED -down-> EXPECTING_TAG_END_NAME: '/'  

IDLE -up-> INVALID: any except '<'
EXPECTING_TAG_END_NAME -left-> INVALID: any except\nsequentially "{active_tag_name}>"  
EXPECTING_TAG_NAME_MORE -left-> INVALID: '<'
EXPECTING_TAG_EMPTY_MIXED --> INVALID: any of {'<', '>'}  
EXPECTING_TAG_NAME_EMPTY -down-> INVALID: '>'  

EXPECTING_TAG_END_NAME --> FINISHED: sequentially "{active_tag_name}>"  
FINISHED --> INVALID: any 


@enduml
