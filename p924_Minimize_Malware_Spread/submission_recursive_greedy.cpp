bool debug = false;
int const MAXN = 300;
int const INVALID = -1;
int connectedCompId[MAXN]; 
    
/*
test cases
[[1,1,0],[1,1,0],[0,0,1]]
[0,1]
[[1,0,0],[0,1,0],[0,0,1]]
[0,2]
[[1,1,1],[1,1,1],[1,1,1]]
[1,2]
[[1,1,0],[1,1,0],[0,0,1]]
[0,1,2]
[[1,0,0,0,1,0,0,0,0,0,1],[0,1,0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,1,1,0],[0,0,0,0,0,0,1,1,0,0,0],[0,0,1,0,0,0,1,1,0,0,0],[0,0,0,0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,1,0],[1,0,0,0,0,0,0,0,0,0,1]]
[7,8,6,2,3]
[[1,0,1,0],[0,1,0,1],[1,0,1,0],[0,1,0,1]]
[2,1]
[[1,0,1,0],[0,1,0,1],[1,0,1,0],[0,1,0,1]]
[2,1]
*/
class Solution {
public:
    void dfs(int newConnectedCompId, int i, vector<vector<int>> &adj, unordered_set<int> &initial, int &malwareCountInThisComp, int &sizeOfThisComp, int &firstMalwareIdx) {
        connectedCompId[i] = newConnectedCompId;
        ++sizeOfThisComp;
        if (initial.count(i)) {
            ++malwareCountInThisComp;
            if (INVALID == firstMalwareIdx || i < firstMalwareIdx) {
                firstMalwareIdx = i;
            }
        }
        for (auto ni : adj[i]) {
            if (INVALID != connectedCompId[ni]) continue;
            dfs(newConnectedCompId, ni, adj, initial, malwareCountInThisComp, sizeOfThisComp, firstMalwareIdx);
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        memset(connectedCompId, INVALID, sizeof(connectedCompId));
        unordered_set<int> initialSet;
        for (auto x : initial) {
            initialSet.insert(x);
        }
        
        int n = graph.size();
        vector<vector<int>> adj(n, vector<int>());
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (j == i) continue;
                if (0 == graph[i][j]) continue;
                adj[i].push_back(j);
            }
        }
        
        int ansIdx = INVALID, ansReduction = INVALID;
        int currentConnectedCompId = 0;
        for (int i = 0; i < n; ++i) {
            if (INVALID != connectedCompId[i]) continue;
            int malwareCountInThisComp = 0, sizeOfThisComp = 0, firstMalwareIdx = INVALID;
            dfs(currentConnectedCompId, i, adj, initialSet, malwareCountInThisComp, sizeOfThisComp, firstMalwareIdx);
            if (debug) {
                printf("size of currentConnectedCompId:%d is %d, malwareCountInThisComp is %d, firstMalwareIdx: %d\n", currentConnectedCompId, sizeOfThisComp, malwareCountInThisComp, firstMalwareIdx);
            }
            if (1 < malwareCountInThisComp) {
                if (INVALID == ansIdx || firstMalwareIdx < ansIdx) {
                    ansIdx = firstMalwareIdx;
                    ansReduction = 0;
                }
            }
            
            if (
                1 == malwareCountInThisComp
                && 
                (
                    sizeOfThisComp > ansReduction 
                    || 
                    (sizeOfThisComp == ansReduction && firstMalwareIdx < ansIdx)
                )
            ) {
                // Only in this case, removing the malware can reduce the final infection.
                ansIdx = firstMalwareIdx;
                ansReduction = sizeOfThisComp;
            }
            ++currentConnectedCompId;
        }
        
        return ansIdx;
    }
};
